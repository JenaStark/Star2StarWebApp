/**
 * Created by Michael on 5/13/16.
 */



    var Comment = React.createClass({
    rawMarkup: function() {
    var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
    return { __html: rawMarkup };
},

    render: function() {
    return (
    <div className="comment">
    <h2 className="commentAuthor">
    {this.props.author}
    </h2>
    <span dangerouslySetInnerHTML={this.rawMarkup()} />
    </div>
    );
}
});

    var CommentBox = React.createClass({
    /* Do not need to load data on this page
    loadCommentsFromServer: function() {
    $.ajax({
    url: this.props.url,
    dataType: 'json',
    cache: false,
    success: function(data) {
    this.setState({data: data});
}.bind(this),
    error: function(xhr, status, err) {
    console.error(this.props.url, status, err.toString());
}.bind(this)
});
},*/
    handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
    url: this.props.url,
    dataType: 'json',
    type: 'POST',
    data: comment,
    success: function(data) {
    this.setState({data: data});
}.bind(this),
    error: function(xhr, status, err) {
    this.setState({data: comments});
    console.error(this.props.url, status, err.toString());
}.bind(this)
});
},
    getInitialState: function() {
    return {data: []};
},
   /* Got rid of displaying old data when mounting
   componentDidMount: function() {
    this.loadCommentsFromServer();
    setInterval(this.loadCommentsFromServer, this.props.pollInterval);
},*/
        /* Include  <CommentList data={this.state.data} /> to display data*/
    render: function() {
    return (
    <div className="commentBox">
    <h1>Current Promotions</h1>
    <CommentForm onCommentSubmit={this.handleCommentSubmit} />
    </div>
    );
}
});

    var CommentList = React.createClass({
    render: function() {
    var commentNodes = this.props.data.map(function(comment) {
    return (
    <Comment author={comment.author} key={comment.id}>
    {comment.text}
    </Comment>
    );
});
    return (
    <div className="commentList">
    {commentNodes}
    </div>
    );
}
});


    $("#start").datepicker(
    {
        onSelect: function()
    {
        var start = $(this).datepicker('getDate');
    }
    });
    $("#end").datepicker(
    {
        onSelect: function()
    {
        var end = $(this).datepicker('getDate');
    }
    });

    var CommentForm = React.createClass({
    getInitialState: function() {
    return {author: '', text: '', file: null};
},
    handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
},
    handleTextChange: function(e) {
    this.setState({text: e.target.value});
},
    handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
    return;
}
    this.props.onCommentSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
},
    render: function() {
    return (
    <form className="commentForm" onSubmit={this.handleSubmit}>
    <input class = "form"
    type="text"
    placeholder="PROMOTION NAME"
    value={this.state.author}
    onChange={this.handleAuthorChange}
    />
    <p></p>
    <input class = "form" id = "description"
    type="text"
    placeholder="DESCRIPTION"
    value={this.state.text}
    onChange={this.handleTextChange}
    />
    <p></p>
        <input id = "end"
               type="date"
               value = {this.state.end}
        />
        <p></p>
        <input id = "start"
            type = "date"
            value = {this.state.start}

            />
        <p></p>

        <input id = "file"
               type = "file"
               value = {this.state.file}

        />
    <input type="submit" value="POST PROMOTION" />
    </form>
    );
}
});

    ReactDOM.render(
    <CommentBox url="/api/comments" />,
    document.getElementById('content')
    );
