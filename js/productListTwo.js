/**
 * Created by Michael on 5/16/16.
 */

var Comment = React.createClass({
    rawMarkup: function() {
        var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
        return { __html: rawMarkup };
    },

    render: function() {

        var name = this.props.author

        return (
                <tr>
                    <td>{this.props.id}</td>
                    <td>{name}</td>
                    <td dangerouslySetInnerHTML={this.rawMarkup()}>{this.props.text}</td>
                    <td>{this.props.start}</td>
                    <td>{this.props.end}</td>

                    <td><input
                        type="checkbox"
                        ref="inStockOnlyInput"
                        onChange={this.handleChange}
                    /></td>
                </tr>
        );
    }
});

var CommentBox = React.createClass({
    loadCommentsFromServer: function() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleCommentSubmit: function(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                this.setState({data: comments});
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    getInitialState: function() {
        return {data: []};
    },
    componentDidMount: function() {
        this.loadCommentsFromServer();
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function() {
        return (
            <div className="commentBox">
                <h1>Current Promotions</h1>
                <CommentList data={this.state.data} />
            </div>
        );
    }
});

var CommentList = React.createClass({
    render: function() {
        var commentNodes = this.props.data.map(function(comment) {
            return (
                <Comment author={comment.author} key={comment.id} start={comment.start} end={comment.end}>
                    
                    {comment.text}
                </Comment>
            );
        });


        return (
            <div className="commentList">

                <table id="productTable">
                    <caption>Promotional List</caption>

                    <thead>
                    <tr>
                        <th>Posted Date</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>StartDate</th>
                        <th>EndDate</th>
                        <th>Done</th>
                    </tr>
                    </thead>

                    <tbody>{commentNodes}</tbody>
                </table>
            </div>
        );

    }
});


ReactDOM.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('container')
);

